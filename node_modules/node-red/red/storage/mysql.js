/**
 * Copyright 2015 SitScape, inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

var when = require('when');
var nodeFn = require('when/node/function');
var keys = require('when/keys');

var log = require("../log");

var mysql = require('mysql');
var connPool;
var encryptionKey = 'ABQIAAAAvFEFnIRDLc0';
var config = {};
var credentials = {};
var globals = {};
var sessions = {};
var library = [];

var settings;

// Upgrade for JSON.stringify, updated to allow arrays
(function(){
    // Convert array to object
    var convArrToObj = function(array){
        var thisEleObj = new Object();
        if(typeof array == "object"){
            for(var i in array){
                var thisEle = convArrToObj(array[i]);
                thisEleObj[i] = thisEle;
            }
        }else {
            thisEleObj = array;
        }
        return thisEleObj;
    };
    var oldJSONStringify = JSON.stringify;
    JSON.stringify = function(input){
        if(oldJSONStringify(input) == '[]')
            return oldJSONStringify(convArrToObj(input));
        else
            return oldJSONStringify(input);
    };
})();

var mysqlStorage = {
    init: function(_settings) {
        settings = _settings;
        config = {
            id : null,
            item_id : settings.flows.id,
            config : "",
            extra : "",
            type : "config"
        };
        credentials = {
            id : null,
            item_id : settings.flows.id,
            config : "",
            extra : "",
            type : "credentials"
        };
        globals = {
            id : null,
            item_id : settings.flows.id,
            config : "",
            extra : "",
            type : "globals"
        };
        return when.promise(function(resolve, reject) {
            if(settings.mysql && settings.mysql.host && settings.mysql.user && settings.mysql.password){
                try{
                    connPool = mysql.createPool({
                        host: settings.mysql.host,
                        user: settings.mysql.user,
                        password: settings.mysql.password,
                        database: settings.mysql.database
                    });
                    resolve([]);
                }catch(exc){
                    reject(exc);
                }
            }
        });
    },
    deleteFlows: function(){
        console.log("DELETING FLOWS");
        return when.promise(function(resolve, reject){
            try{
                connPool.getConnection(function(err, connection){
                    if(err){
                        reject(err);
                    }
                    connection.query("DELETE FROM node_red_config WHERE item_id = ?", [settings.flows.id], function(err, result){
                        connection.release();
                        if(err){
                            reject(err);
                        }
                        resolve(result.rowsAffected);
                    });
                });
            }catch(exc){
                reject(exc);
            }
        });
    },
    getFlows: function() {
        console.log("GETTING FLOWS");
        return when.promise(function(resolve, reject) {
            //nothing should happen after this in testing
            try{
                connPool.getConnection(function(err, connection){
                    if(err){
                        reject(err);
                    }
                    connection.query('SELECT id, item_id, name, AES_DECRYPT(FROM_BASE64(config), SHA1(?)) AS config, extra, type from node_red_config WHERE type="config" AND item_id= ? limit 1',[encryptionKey, settings.flows.id ], function(err, rows, fields) {
                        connection.release();
                        if (!err && rows.length > 0 && rows[0].config){
                            config = {
                                id : rows[0].id,
                                item_id : rows[0].item_id,
                                name : rows[0].name,
                                config : rows[0].config,
                                extra : rows[0].extra
                            };
                            var result = JSON.parse(rows[0].config);
//                            console.log(result);
                            resolve(result);
                        } else if(!err){
                            console.log("No flows were returned from the database.");
                            resolve([]);
                        } else{
                            console.log("There was a problem retrieving flows from the database");
                            console.log(err);
                            reject(err);
                        }
                    });
                });
                
            }catch(exc){
                console.log("Database error: " + exc);
//                connection.end();
                reject(exc);
            }
        });
    },

    saveFlows: function(flows) {
        console.log("SAVING FLOWS");
        return when.promise(function(resolve, reject){
            try{
                config.config = JSON.stringify(flows);
                console.log('config.config:'+config.config);
                connPool.getConnection(function(err, connection){
                    if(config.id){  //this config is already in db so just update
                        connection.query("UPDATE node_red_config SET config=TO_BASE64(AES_ENCRYPT(?, SHA1(?))) WHERE type='config' AND id=?",[config.config, encryptionKey, config.id], function(err, rows){
                            connection.release();
                            if(!err){
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }else{
                        connection.query("INSERT INTO node_red_config SET item_id=?,config=TO_BASE64(AES_ENCRYPT(?, SHA1(?))),extra=?,type=?",[config.item_id, config.config, encryptionKey, config.extra, config.type], function(err, rows){
                            connection.release();
                            if(!err){
                                config = {
                                    id : rows.insertId
                                };
                                config.id = rows.insertId;
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }
                });                
            }catch(exc){
                reject(exc);
            }
        });
        
        
    },

    getCredentials: function() {
        console.log("GETTING CREDENTIALS");
        return when.promise(function(resolve, reject) {
            try{
                connPool.getConnection(function(err, connection){
                    if(err){
                        reject(err);
                    }
                    connection.query('SELECT id, item_id, name, AES_DECRYPT(FROM_BASE64(config), SHA1(?)) AS config, extra, type from node_red_config WHERE type="credentials" AND item_id= ? limit 1',[encryptionKey, settings.flows.id ], function(err, rows, fields) {
                        connection.release();
                        if (!err && rows.length > 0){
                            credentials = {
                                id : rows[0].id,
                                item_id : rows[0].item_id,
                                config : rows[0].config,
                                extra : rows[0].extra,
                                type : "credentials"
                            };
                            var result = JSON.parse(rows[0].config);
                            resolve(result);
                        } else if(!err){
                            console.log("No credentials were returned from the database.");
                            resolve([]);
                        } else{
                            console.log("There was a problem retrieving credentials from the database");
                            reject(err);
                        }
                    });
                });
                
            }catch(exc){
                console.log("Database error: " + exc);
                reject(exc);
            }
        });
    },

    saveCredentials: function(creds) {
        console.log("SAVING CREDENTIALS");
        return when.promise(function(resolve, reject){
            try{
                credentials.config = JSON.stringify(creds);
                connPool.getConnection(function(err, connection){
                    if(err){
                        reject(err);
                    }
                    if(credentials.id){  //this credentials is already in db so just update
                        connection.query("UPDATE node_red_config SET config=TO_BASE64(AES_ENCRYPT(?, SHA1(?))) WHERE id=?",[credentials.config, encryptionKey, credentials.id], function(err, rows){
                            connection.release();
                            if(!err){
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }else{
                        connection.query("INSERT INTO node_red_config SET item_id=?,config=TO_BASE64(AES_ENCRYPT(?, SHA1(?))),extra=?,type=?",[settings.flows.id, credentials.config, encryptionKey, credentials.extra, "credentials"], function(err, rows){
                            connection.release();
                            if(!err){
                                credentials.id = rows.insertId;
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }
                });
            }catch(exc){
                reject(exc);
            }
        });
    },

    getSettings: function() {
        console.log("GETTING SETTINGS");
        return when.promise(function(resolve, reject) {
            try{
                connPool.getConnection(function(err, connection){
                    if(err){
                        console.log(err);
                        reject(err);
                    }
                    connection.query('SELECT * from node_red_config WHERE type="globals" AND item_id= ? limit 1', [settings.flows.id ], function(err, rows, fields) {
                        connection.release();
                        if (!err && rows.length > 0){
                            globals = {
                                id : rows[0].id,
                                item_id : rows[0].item_id,
                                config : rows[0].config,
                                extra : rows[0].extra
                            };
                            var result = JSON.parse(rows[0].config);
                            resolve(result);
                        } else if(!err){
                            console.log("No settings were returned from the database.");
                            resolve([]);
                        } else{
                            console.log("There was a problem retrieving settings from the database");
                            reject(err);
                        }
                    });
                });
                
            }catch(exc){
                console.log("Database error: " + exc);
                reject(exc);
            }
        });
    },
    saveSettings: function(global) {
        console.log("SAVING SETTINGS: " + global);
        return when.promise(function(resolve, reject){
            try{
                globals.config = JSON.stringify(global);
                connPool.getConnection(function(err, connection){
                    if(err){
                        reject(err);
                    }
                    if(0 < globals.id){  //this globals is already in db so just update
                        connection.query("UPDATE node_red_config SET config=? WHERE type='globals' AND id=?",[globals.config, globals.id], function(err, rows){
                            connection.release();
                            if(!err){
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }else{
                        connection.query("INSERT INTO node_red_config SET ?", [globals], function(err, rows){
                            connection.release();
                            if(!err){
                                globals.id = rows.insertId;
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }
                });

            }catch(exc){
                reject(exc);
            }
        });
    },
    getSessions: function() {
        console.log("GETTING SESSIONS");
        return when.promise(function(resolve, reject) {
            try{
                connPool.getConnection(function(err, connection){
                    if(err){
                        reject(err);
                    }
                    connection.query('SELECT * from node_red_config WHERE type="sessions" AND item_id= ? limit 1',[settings.flows.id ], function(err, rows, fields) {
                        connection.release();
                        if (!err && rows.length > 0){
                            sessions = {
                                id : rows[0].id,
                                item_id : rows[0].item_id,
                                config : rows[0].config,
                                extra : rows[0].extra
                            };
                            var result = JSON.parse(rows[0].config);
                            resolve(result);
                        } else if(!err){
                            console.log("No sessions were returned from the database.");
                            resolve([]);
                        } else{
                            console.log("There was a problem retrieving sessions from the database");
                            reject(err);
                        }
                    });
                });
                
            }catch(exc){
                console.log("Database error: " + exc);
                reject(exc);
            }
        });
    },
    saveSessions: function(session) {
        console.log("SAVING SESSIONS");
        return when.promise(function(resolve, reject){
            try{
                sessions.config = JSON.stringify(session);
                connPool.getConnection(function(err, connection){
                    if(err){
                        reject(err);
                    }
                    if(sessions.id){  //this globals is already in db so just update
                        connection.query("UPDATE node_red_config SET config=? WHERE type='sessions' AND id=?",[sessions.config, sessions.id], function(err, rows){
                            connection.release();
                            if(!err){
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }else{
                        connection.query("INSERT INTO node_red_config SET ?", [sessions], function(err, rows){
                            connection.release();
                            if(!err){
                                sessions.id = rows.insertId;
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }
                });
                
            }catch(exc){
                reject(exc);
            }
        });
    },

    getLibraryEntry: function(type,path) {
console.log("GETTING LIBRARIES");
        return when.promise(function(resolve, reject) {
            try{
                if(/(.*)\/$/.test(path)){
                    connPool.getConnection(function(err, connection){
                        if(err){
                            reject(err);
                        }
                        var sql, inserts;
                        if("/" === path){
                            sql = 'SELECT * from node_red_config WHERE type= ? AND item_id=?';
                            inserts = [type, settings.flows.id];
                        }else{
                            sql = 'SELECT * from node_red_config WHERE type= ? AND name LIKE ? AND item_id=?';
                            inserts = [type, path + "%", settings.flows.id];
                        }
                        sql = mysql.format(sql, inserts);
                        connection.query(sql, function(err, rows) {
                            connection.release();
                            if (!err && rows.length > 0){
                                console.log(rows.length);
                                var result = [];
                                for(var i=0; i < rows.length;i++){
                                    library[type] = library[type] || [];
                                    library[type][rows[i].name] = {
                                        id : rows[i].id,
                                        item_id : rows[i].item_id,
                                        name : rows[i].name,  //same as path variable
                                        config : JSON.parse(rows[i].config),
                                        extra : JSON.parse(rows[i].extra),
                                        type : rows[i].type
                                    };
                                    if(/(.+)\/$/.test(rows[i].name)){  //indicates that it is a directory
                                        var dirname = rows[i].name.match(/([^\/]*)\/$/);
                                        result.push(dirname);
                                    }else{

                                        var libname = rows[i].name.match(/([^\/]*)$/);
                                        if(libname[0]){  //means that there was at least one match
                                            var tempMeta = JSON.parse(rows[i].extra) || {};
                                            tempMeta.fn = libname[0];
                                            result.push(tempMeta);
                                        }
                                    }
                                }
                                resolve(result);
                            } else if(!err){
                                console.log("No libraries were returned from the database.");
                                resolve([]);
                            } else{
                                console.log("There was a problem retrieving a library entry from the database");
                                reject(err);
                            }
                        });
                    });
                }else{
                    connPool.getConnection(function(err, connection){
                        if(err){
                            reject(err);
                        }
                        connection.query('SELECT * from node_red_config WHERE type=? AND item_id=? AND name=? limit 1',[type, settings.flows.id, path], function(err, rows, fields) {
                            connection.release();
                            if (!err && rows.length > 0){
                                library[path] = {
                                    id : rows[0].id,
                                    item_id : rows[0].item_id,
                                    name : rows[0].name,  //same as path variable
                                    config : rows[0].config,
                                    extra : rows[0].extra
                                };
                                var result = JSON.parse(rows[0].config);
                                resolve(result);
                            } else if(!err){
                                console.log("No libraries were returned from the database.");
                                resolve([]);
                            } else{
                                console.log("There was a problem retrieving a library entry from the database");
                                reject(err);
                            }
                        });
                    });
                }
                
                
            }catch(exc){
                console.log("Database error: " + exc);
                reject(exc);
            }
        });
    },

    saveLibraryEntry: function(type,path,meta,body) {
        console.log("SAVING LIBRARY: ");
        console.log("TYPE: " + type);
        console.log("PATH: " + path);
        console.log("META : " + JSON.stringify(meta));
        console.log("body: " + body);
        return when.promise(function(resolve, reject){
            try{
//                var headers = "";
//                for (var i in meta){
//                    if(meta.hasOwnProperty(i)){
//                        headers += "// "+i+": " +meta[i]+"\n";
//                    }
//                }
//                body = headers + body;
                library[type][path] = library[path] || {};
                library[type][path].config = JSON.stringify(body);
                library[type][path].type = type;
                library[type][path].name = path;
                library[type][path].extra = JSON.stringify(meta);
                library[type][path].item_id = settings.flows.id;
                connPool.getConnection(function(err, connection){
                    if(err){
                        reject(err);
                    }
                    if(library[type][path].id){  //this library node is already in db so just update
                        connection.query("UPDATE node_red_config SET config=?, extra=? WHERE id=?",[body, library[type][path].meta, library[type][path].id], function(err, rows){
                            connection.release();
                            if(!err){
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }else{
                        connection.query("INSERT INTO node_red_config SET ?",[library[type][path]], function(err, rows){
                            connection.release();
                            if(!err){
                                library[type][path].id = rows.insertId;
                                resolve(true);
                            }else{
                                reject(err);
                            }
                        });
                    }
                });
                
            }catch(exc){
//                connection.end();
                reject(exc);
            }
        });
    },
    getAllStates: function(){
        return when.promise(function(resolve, reject){
            connPool.getConnection(function(err, connection){
                if(err){
                    console.log(err);
                    reject(err);
                }
                connection.query("SELECT item_id, config FROM node_red_config WHERE type = 'state'", [], function(err, rows, fields){
                    connection.release();
                    if(err){
                        console.log(err);
                        reject(err);
                    }
                    var results = [];
                    for(var i=0; i<rows.length; i++){
                        results.push({
                            item_id: rows[i].item_id,
                            state: rows[i].config
                        });
                    }
                    resolve(results);
                });
            });
        });
    },
    getState: function(item_id){
        return when.promise(function(resolve, reject){
            connPool.getConnection(function(err, connection){
                connection.release();
                if(err){
                    console.log(err);
                    reject(err);
                }
                connection.query("SELECT item_id, config FROM node_red_config WHERE type = 'state' AND item_id=?", [item_id], function(err, rows, fields){
                    if(err){
                        console.log(err);
                        reject(err);
                    }
                    var results = [];
                    for(var i=0; i<rows.length; i++){
                        results.push({
                            item_id: rows[i].item_id,
                            state: rows[i].config
                        });
                    }
                    resolve(results);
                });
            });
        });
    },
    saveState: function(item_id, state){
        return when.promise(function(resolve, reject){
            connPool.getConnection(function(err, connection){
                if(err){
                    console.log(err);
                    reject(err);
                }
                connection.query("UPDATE node_red_config SET config = ? WHERE type = 'state' AND item_id=?", [state, item_id], function(err, result){
                    if(err){
                        console.log(err);
                        reject(err);
                    }
                    if(result.affectedRows < 1){
                        connection.query("INSERT INTO node_red_config (item_id, config, type) VALUES(?, ?, 'state')", [item_id, state], function(err,result){
                            if(err){
                                console.log(err);
                                reject(err);
                            }
                            resolve(true);
                        });
                    }else{
                        resolve(true);
                    }
                    connection.release();
                });
            });
        });
    }
};

module.exports = mysqlStorage;
