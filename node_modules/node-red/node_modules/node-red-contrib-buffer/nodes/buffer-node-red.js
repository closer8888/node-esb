var mysql = require('mysql');
var when = require('when');

module.exports = function(RED) {
	"use strict";
    function bufferIn(config) {
        RED.nodes.createNode(this,config);
        var capacity = config.capacity;
        var duration = 1000;
        var flashout = config.flashout;
        var units = config.units;
        if(units == 'ms'){
            duration = config.duration;
        } else if(units == 'sec'){
            duration = config.duration * 1000;
        } else if(units == 'min'){
            duration = config.duration * 60 * 1000;
        } else if(units == 'hr'){
            duration = config.duration * 60 * 60 * 1000;
        }
        var id = config.id;
        var node = this;
        var buffer = new BufferPool(id, capacity);
        var gid = config.z;
        this.interval_id = null;
        this.interval_id = setInterval(function(){
            if(buffer.getBufferLength() > 0){
                var objArray = buffer.flashout(flashout);
                if(objArray.length > 0){
                    node.send({payload: objArray, units: units});
                }
            }

        }, duration);

        this.on('input', function(msg) {
            buffer.setBufferFIFO(msg.payload);
        });

        this.on('close', function(){
            if(this.interval_id != null){
                buffer = null;
                clearInterval(this.interval_id);
            }
        });
    }
    RED.nodes.registerType("buffer", bufferIn);
}

var BufferPool = function (id, capLimit) {
    var _poolId = id;
    var _bufferArray = [];
    var _inCurrentPointer = -1;
    var _capacityLimit = (capLimit && capLimit > 0? capLimit:10000);
    var _timeDelay = null;
    var _initLength = 0;

    this.setBufferFIFO = function (obj) {
        if(typeof obj == 'string'){
            obj = {payload: obj};
        }
    	obj.time_added_to_buffer = Date.now();
        if(_bufferArray.length >= _capacityLimit){
            _bufferArray.shift();
        }
        _bufferArray.push(obj);
        _inCurrentPointer = _bufferArray.length - 1;
    }

    this.getBufferFIFO = function () {
        var obj = _bufferArray.shift();
        _inCurrentPointer = _bufferArray.length - 1;
        return obj;
    }

    this.getBufferLength = function () {
        return _bufferArray.length;
    }

    this.getInitLength = function () {
        return _initLength;
    }

    this.getCapacityLimit = function(){
        return _capacityLimit;
    }

    this.toString = function(){
    	return JSON.stringify(_bufferArray);
    }

    this.flashout = function(units){
        var objArray = [];
        for(var i = units; i > 0; i--){
            if(_bufferArray.length == 0) break;
            objArray.push(this.getBufferFIFO());
        }
        return objArray;
    }
}